/* Plugin generated by AMXX-Studio */
/*ConnorMcLeod - Countdown Function */
 
#include <amxmodx>
#include <cstrike>
#include <fun>
#include <hamsandwich>
 
#pragma semicolon 1
 
#define get_bit(%1,%2)          (%1 & 1<<(%2&31))
#define set_bit(%1,%2)          %1 |= (1<<(%2&31))
#define clear_bit(%1,%2)        %1 &= ~(1<<(%2&31))
 
new const g_Info[][] =
{
        "New Terror",
        "0.1.1.rework",
        "eNd.",
        "skitaila03",
        "fioriginal.ro"
};
 
enum _:g_Cvars
{
        new_tag,
        new_time,
        new_cooldown
};
new const cvar_name[g_Cvars][] = {
        "new_dr",
        "new_time",
        "new_cooldown"
};
 
new const cvar_value[g_Cvars][] = {
        "[DR]",
        "15",
        "60"
};
 
enum _:g_x1    
{
        Terro,
        Lock,
        Cooldown
};
 
new g_Cvar[g_Cvars];
 
new g_x0[g_x1];

new bool:isAfk[MAX_PLAYERS+1];
 
public plugin_precache()
{
        for(new j = 0; j < g_Cvars; j++)
                g_Cvar[j] = register_cvar(cvar_name[j] , cvar_value[j]);
}
public plugin_init() {
 
	register_plugin(g_Info[0], g_Info[1], g_Info[random_num(2,3)] );
 
	register_clcmd("say !newtero","Argument_Open");
	register_logevent("roundStart", 2, "1=Round_Start");
} 

public roundStart() 
{
	new players[MAX_PLAYERS], pnum;
	get_players(players, pnum, "ch");
	
	for(new i = 0; i < pnum; ++i)
	{
		if(isAfk[players[i]])
		{
			show_menu(players[i], 0, "^n", 1 );
			isAfk[players[i]] = false;
		}
	}
}

public Argument_Open(iPlayer)
{
        if(cs_get_user_team(iPlayer) != CS_TEAM_T)
        {
                client_print_color(iPlayer, print_team_default, "^4%s ^3%s^1 nu poti folosi aceasta comanda daca nu esti^4 Terorist^1 !^4", g_sCvar(new_tag), szName(iPlayer));
                return PLUGIN_HANDLED;
        }
        if(GetCounterTerrorists() <= 1)
        {
                client_print_color(iPlayer, print_team_default, "^4%s ^3%s^1 nu poti folosi aceasta comanda decat daca este minim un^4 CT^1 !", g_sCvar(new_tag), szName(iPlayer));
                return PLUGIN_HANDLED;
        }
        if(GetTerrorists() > 1)
        {
                client_print_color(iPlayer, print_team_default, "^4%s ^3%s^1 nu poti folosi aceasta comanda cand sunt mai multi^4 Teroristi.^1 !^4", g_sCvar(new_tag), szName(iPlayer));
                return PLUGIN_HANDLED;
        }
        if(!is_user_alive(iPlayer))
        {
                client_print_color(iPlayer, print_team_default, "^4%s ^3%s^1 nu poti folosi aceasta comanda cand esti mort !", g_sCvar(new_tag), szName(iPlayer));
                return PLUGIN_HANDLED;
        }
        if(g_x0[Cooldown] < time())
        {
                g_x0[Terro] = iPlayer;
                Argument_Open_Menu(iPlayer);
                g_x0[Cooldown] = time() + g_nCvar(new_cooldown);       
        }
        else
        {
                new Seconds = g_x0[Cooldown] - time();
                client_print_color(iPlayer, print_team_default, "^4%s ^3%s^1 asteapta^4,^3 %i^1 secunde^3 !^4", g_sCvar(new_tag), szName(iPlayer), Seconds);
               
        }
 
        return PLUGIN_HANDLED;
}
 
public Argument_Open_Menu(iPlayer)
{
        new Argument = menu_create("\dAlege un \dinlocuitor\y:", "Argument_Sub_Menu");
        new Players[32], pNum, tPlayer;
        new szPlayer[10];
        get_players(Players, pNum, "ch", "CT");
        for( new i; i<pNum; i++ )
        {
                tPlayer = Players[i];
                if(cs_get_user_team(tPlayer) == CS_TEAM_CT && !get_bit(g_x0[Lock], tPlayer) && is_user_alive(tPlayer))
                {
                        num_to_str(tPlayer, szPlayer, charsmax(szPlayer));
                        menu_additem(Argument, szName(tPlayer), szPlayer, 0);
                }              
        }
        menu_display(iPlayer, Argument, 0);
        return PLUGIN_HANDLED;
}
 
public Argument_Sub_Menu(iPlayer, Argument, item)
{
		if( item == MENU_EXIT)
		{
				menu_destroy(Argument);
				return PLUGIN_HANDLED;
		}
       
		new data[7], name[64];
		new access, callback;
		menu_item_getinfo(Argument, item, access, data,charsmax(data), name,charsmax(name), callback);
		new iPlayer = str_to_num(data);
		//set_task(15.0, "Close_Menu", iPlayer+03);
		new Text[555 char]; 
       
		formatex(Text, charsmax(Text), "Vrei sa-i fii inlocuitorul lui %s?", szName(g_x0[Terro]) );
		new Menu = menu_create(Text, "Answers_Sub_Menu");
               
		formatex(Text, charsmax(Text), "\rDa \dvreau \y!" );
		menu_additem(Menu, Text, "1", 0);
               
		formatex(Text, charsmax(Text), "\rNu \dmultumesc \y!" );
		menu_additem(Menu, Text, "2", 0);
 
		menu_setprop(Menu, MPROP_EXIT , MEXIT_ALL);
		menu_display(iPlayer, Menu, 0);
		
		new index[10];
		num_to_str(iPlayer, index, charsmax(index));
		isAfk[iPlayer] = true;
		set_task(15.0, "autoRefuse", Menu, index, charsmax(index));
 
		return PLUGIN_HANDLED;
}

public autoRefuse(index[], Menu)
{
	new id = str_to_num(index);
	if ( isAfk[id] )
	{
		menu_destroy(Menu);
		isAfk[id] = false;
	}
}

public Answers_Sub_Menu(iPlayer, Menu, item)
{
	if (item == MENU_EXIT)
	{
		menu_destroy(Menu); 
		return PLUGIN_HANDLED;
	}
       
	new data[7], name[64];
	new access, callback;
	menu_item_getinfo(Menu, item, access, data, charsmax(data), name, charsmax(name), callback);
       
	new Key = str_to_num(data);
       
	switch (Key)
	{
		case 1:
		{
			if(is_user_alive(iPlayer))
				user_silentkill(iPlayer);
                       
			cs_set_user_team(iPlayer ,CS_TEAM_T);
			ExecuteHamB(Ham_CS_RoundRespawn, iPlayer);
			//strip_user_weapons(iPlayer);
			//give_item(iPlayer, "weapon_knife");
			set_user_health(iPlayer, 66+34);
			g_x0[Cooldown] = time() + g_nCvar(new_time);
 
			cs_set_user_team(g_x0[Terro] ,CS_TEAM_CT);
 
			user_silentkill(g_x0[Terro]);
 
			client_print_color(0, print_team_default, "^4%s ^3%s^1 a fost schimbat cu^4 %s !", g_sCvar(new_tag), szName(iPlayer), szName(g_x0[Terro]));
       
		}
               
		case 2:
		{
			set_bit(g_x0[Lock], iPlayer);
 
			client_print_color(0, print_team_default, "^4%s ^3%s^1 nu a vrut sa schimbe locul cu^4 %s !", g_sCvar(new_tag), szName(iPlayer), szName(g_x0[Terro]));
		}
               
	}
	g_x0[Terro] = 0;
	isAfk[iPlayer] = false;
       
	menu_destroy(Menu);
	return PLUGIN_HANDLED;
}
 
stock szName(iPlayer)
{
        new sz_Name[MAX_NAME_LENGTH];
        get_user_name(iPlayer, sz_Name, charsmax(sz_Name));
 
        return sz_Name;
}
stock g_sCvar( cvar )
{
        new sCvar[ 32 ];
        get_pcvar_string(  g_Cvar[ cvar ], sCvar, charsmax( sCvar ));
 
        return sCvar;
}
 
stock g_nCvar( cvar )
{
        new nCvar = get_pcvar_num(  g_Cvar[ cvar ] );
 
        return nCvar;
}
 
stock szHost()
{
        new sz_HostName[64];
        get_cvar_string( "hostname", sz_HostName, sizeof ( sz_HostName ) -1 );
 
        return sz_HostName;
}
 
GetTerrorists() {
        static iPlayers[32], iNum;
        get_players(iPlayers, iNum, "ae", "TERRORIST");
        return iNum;
}
 
GetCounterTerrorists() {
        static iPlayers[32], iNum;
        get_players(iPlayers, iNum, "ae", "CT");
        return iNum;
}