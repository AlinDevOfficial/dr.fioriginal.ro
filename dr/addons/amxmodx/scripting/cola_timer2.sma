/* Plugin generated by AMXX-Studio */
 
#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <fakemeta>
#include <nvault>
#include <cstrike>
#include <hamsandwich>
 
#define PLUGIN "Timer"
#define VERSION "0.1"
#define AUTHOR "Dr.FioriGinal.Ro"
#pragma semicolon 1
 
#define MAX_PLAYERS 32
#define MAX_NAME_LENGTH 32
 
#define IsPlayer(%1) ( 1 <= %1 <= MaxClients )
#define FBitSet(%1,%2)   (%1 |= (1 << (%2 & 31))) 
#define FBitClear(%1,%2) (%1 &= ~(1 << (%2 & 31))) 
#define FBitGet(%1,%2)   (%1 & (1 << (%2 & 31)))
 
new g_TimeS[MAX_PLAYERS+1], g_TimeM[MAX_PLAYERS+1];
new StatusText;
anew bool:used[MAX_PLAYERS+1];
new bool:Aim[MAX_PLAYERS+1];
new concurs, queue[MAX_PLAYERS+1][32], queue_values[MAX_PLAYERS+1], queue_index[MAX_PLAYERS+1], contor, bool:Error;
new Race_xVar;
 
const OFFSET_CSTEAMS = 114;
 
public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	RegisterHam(Ham_Spawn, "player", "Fwd_PlayerSpawn_Post", 1);
	RegisterHam(Ham_Killed, "player", "Fwd_PlayerKilled_Pre", 0);
	
	StatusText = get_user_msgid("StatusText");
	   
	register_forward(FM_PlayerPreThink, "fwdPlayerPreThink");
}
 
public client_disconnected(id)
{
	if(task_exists(id + 5551))
	{
		remove_task(id + 5551);
	}
               
	new aux[32], ip[32];   
	get_user_ip(id, ip, charsmax(ip), 1);
       
	for(new i = 1; i <= contor; ++i)
	{
		get_user_ip(queue_index[i], aux, charsmax(aux), 1);
		if ( equal(aux, ip) )
		{
			queue_values[queue_index[i]] = 0;
			queue_index[i] = 0;
			Sort();
			--contor;
			break;
		}
	}
}
 
public newRound()
{
		/*
        new Players[MAX_PLAYERS], PlayersNum;
       
        get_players(Players, PlayersNum, "ch");
       
        for (new i = 0; i < PlayersNum; ++i)
        {
                used[Players[i]] = false;
        }*/
		arrayset(used,0,charsmax(used));
}
 
public Fwd_PlayerSpawn_Post(const id)
{
	g_TimeS[id] = 0;
	g_TimeM[id] = 0;
	if ( task_exists(id + 5551) )
	{
		remove_task(id + 5551);
	}
	if ( task_exists(id) )
	{
		remove_task(id);
	}
	
	if( fm_get_user_team(id) == 2 )
	{
		set_task(1.0, "Timer",id + 5551, _, _, "b");
		set_task(0.1, "ClearMsg", id, .flags = "b");
	}
}
 
public Timer(id)
{
	id -= 5551;
	g_TimeS[id]++;
	if( g_TimeS[id] == 60)
	{
		g_TimeS[id] = 0;
		g_TimeM[id]++;
	}
               
	if (!Aim[id])
	{
		new sSMsg[32];
		formatex(sSMsg, charsmax(sSMsg), "Your time: %02d:%02d", g_TimeM[id], g_TimeS[id]);
		message_begin(MSG_ONE, StatusText, {0,0,0}, id);
		write_byte(0);
		write_string(sSMsg);
		message_end();
	}
}
 
public ClearMsg(id)
{
	new target, body;
	get_user_aiming( id, target, body, 9999);
	if ( IsPlayer(target) )
	{
		message_begin(MSG_ONE, StatusText, {0,0,0}, id);
		write_byte(0);
		write_string("1 %c1: %p2^n2  %h: %i3%%");
		/*if(get_user_team(target) == get_user_team(id))
		{
			write_string("Friend : %p2");
		}
		else
		{
			write_string("Enemy : %p2");
		}*/
		message_end();
		Aim[id] = true;
	}
	else
	{
		Aim[id] = false;
	}
}
 
 
public Fwd_PlayerKilled_Pre(victim, attacker, shouldgib)
{
        //client_print(0, print_chat, "debug 1");
        if(fm_get_user_team(victim) == 1 && fm_get_user_team(attacker) == 2)
        {
                //client_print(0, print_chat, "debug 2");
                if( (g_TimeS[attacker] > 30 || g_TimeM[attacker] != 0) && !used[attacker])
                {
                       
                        //client_print(0, print_chat, "debug 3");
                        if ( concurs && !(get_user_flags(attacker) & ADMIN_KICK) )
                        {
                                //client_print(0, print_chat, "debug 4");
                                addInQueue(attacker);
                                printInChat();
                        }
                        else
                        {
                                //client_print(0, print_chat, "debug 4");
                                if( g_TimeM[attacker] >= 1 )
                                        client_print_color(0, print_team_red, "^1 [Dr.FioriGinal.Ro] ^4%s^3 a ucis teroristul ^4%s^3 în %d minut%s și %d secund%s",szName(attacker) ,szName(victim), g_TimeM[attacker], ( (g_TimeM[attacker]>1 || g_TimeM[attacker] == 0)?"e":""), g_TimeS[attacker], ((g_TimeS[attacker]>1 || g_TimeS[attacker] == 0)?"e":""));
                                else    
                                        client_print_color(0, print_team_red, "^1 [Dr.FioriGinal.Ro] ^4%s^3 a ucis teroristul ^4%s^3 în %d secund%s",szName(attacker), szName(victim), g_TimeS[attacker], ((g_TimeS[attacker]>1 || g_TimeS[attacker] == 0)?"e":""));
                        }
                }
        }
        return HAM_IGNORED;
}
 
addInQueue(id)
{
        new ip[32], aux[32];
        get_user_ip(id, ip, charsmax(ip), 1);
       
        for(new i = 1; i <= contor; ++i)
        {
                get_user_ip(queue_index[i], aux, charsmax(aux), 1);
                if ( equal(aux, ip) )
                {
                        ++queue_values[i];
                        Sort();
                        return;
                }
                //client_print(0, print_chat, "%s - %s", aux, ip);
        }
       
        copy(queue[++contor], charsmax(queue[]), ip);
        ++queue_values[contor];
        queue_index[contor] = id;
       
       
        Sort();
}
 
Sort()
{
        new aux, auxbuffer[32];
        for(new i = 1; i <= contor; ++i)
        {
                for(new j = i; j <= contor; ++j)
                {
                        if ( queue_values[i] < queue_values[j] )
                        {
                                aux = queue_values[i];
                                queue_values[i] = queue_values[j];
                                queue_values[j] = aux;
                                aux = queue_index[i];
                                queue_index[i] = queue_index[j];
                                queue_index[j] = aux;
                                copy(auxbuffer, charsmax(auxbuffer), queue[i]);
                                copy(queue[i], charsmax(queue[]), queue[j]);
                                copy(queue[j], charsmax(queue[]), auxbuffer);
                        }
                }
        }
}
 
getName(ip[], bool:error = false)
{
        new name[MAX_NAME_LENGTH], aux[32];
       
        for(new i = 1; i <= get_playersnum(); ++i)
        {
                get_user_ip(queue_index[i], aux, charsmax(aux), 1);
                if ( equal(aux, ip) )
                {
                        get_user_name(queue_index[i], name, charsmax(name));
                        return name;
                }
        }
       
        if ( error )
        {
                Error = true;
                return name;
        }
                       
        for (new i = 1; i <= contor; ++i)
        {
                if ( equal(queue[i], ip) )
                {
                        queue_values[i] = 0;
                        break;
                }
        }
       
        Sort();
        --contor;
       
        return getName(ip, true);
}
 
printInChat(id = 0)
{
        new text[192];
        Error = false;
        switch ( contor )
        {
                case 0:  formatex(text, charsmax(text), "^4[^3Concurs^4]^1 Clasament : Nici un jucător nu a înscris încă.");
                case 1:  formatex(text, charsmax(text), "^4[^3Concurs^4]^1 Clasament : ^4%s^1 este singurul jucător care a punctat ! (^4%d^1 punct%s)", getName(queue[1]), queue_values[1], queue_values[1] == 1 ? "" : "e");
                case 2:  formatex(text, charsmax(text), "^4[^3Concurs^4]^1 Clasament : 1.^4%s^1 (^4%d^1 punct%s), 2.^4%s^1 (^4%d^1 punct%s)", getName(queue[1]), queue_values[1], queue_values[1] == 1 ? "" : "e", getName(queue[2]), queue_values[2], queue_values[2] == 1 ? "" : "e");
                default: formatex(text, charsmax(text), "^4[^3Concurs^4]^1 Clasament : 1.^4%s^1 (^4%d^1 punct%s), 2.^4%s^1 (^4%d^1 punct%s), 3.^4%s^1 (^4%d^1 punct%s)", getName(queue[1]), queue_values[1], queue_values[1] == 1 ? "" : "e", getName(queue[2]), queue_values[2], queue_values[2] == 1 ? "" : "e", getName(queue[3]), queue_values[3], queue_values[3] == 1 ? "" : "e");
        }
        if ( Error )
        {
                printInChat(id);
        }
        else
        {
                client_print_color(id, print_team_red, "%s", text);
        }
}

public hookChat( id )
{
        static args[ 192 ], command[ 192 ];
        read_args( args, charsmax( args ) );
       
	if( !args[ 0 ] )
		return PLUGIN_CONTINUE;
       
        remove_quotes( args[ 0 ] );
       
        new const concursIdent[] = "!concurs", scorIdent[] = "!scor";
	   
        if( equal(args, scorIdent, charsmax(scorIdent)) && concurs)
        {
                printInChat(id);
        }
       
        if( equal(args, lifeIdent, charsmax(lifeIdent)) && !concurs )
        {
                replace(args, charsmax(args), "!", "");
                formatex(command, charsmax(command), "%s", args);
                client_cmd(id, command);
        }
       
        if( equal(args, concursIdent, charsmax(concursIdent)) && get_user_flags(id) & ADMIN_IMMUNITY  )
        {
                if ( concurs )
                {
                        concurs = false;
                        client_print_color(0, print_team_red, "^4[^3Concurs^4]^1 Modul concurs a fost dezactivat");
                }
                else
                {
                        concurs = true;
                        client_print_color(0, print_team_red, "^4[^3Concurs^4]^1 Modul concurs a fost activat");
                }
        }
       
        if( equal(args, lifemenuIdent, charsmax(lifemenuIdent)) && !concurs )
        {
                transfer_life_menu(id);
        }
       
        return PLUGIN_CONTINUE;
}
 
stock szName(id)
{
        new sz_Name[32];
       
        get_user_name(id, sz_Name, charsmax(sz_Name));
       
        return sz_Name;
}
 
stock fm_get_user_team( id )
{
        return get_pdata_int( id, OFFSET_CSTEAMS );
}